# This produces a test for the generic workflows for the CLI e2e test.
# The output will be a file binary-linux-amd64-workflow_dispatch and
# its associated provenance that should be moved to the
# cli/slsa-verifier/testdata/gha_generic/$BUILDER_TAG folder.

on:
  workflow_dispatch:
  push:
    tags:
      # We only expect these on a hard-coded set of tags.
      - 'v14.2'
      - 'v14'
      - 'v13.0.30'

permissions: read-all

env:
  PAT_TOKEN: ${{ secrets.E2E_GENERIC_TOKEN }}
  GH_TOKEN: ${{ github.token }}

jobs:
  generate_name:
    outputs:
      binary-name: ${{ steps.create_name.outputs.binary-name }}
    runs-on: ubuntu-latest
    steps:
      - name: Creates the output name
        id: create_name
        run: |
          if [ ${{ github.event_name == 'workflow_dispatch' }} ]; then
            echo "::set-output name=binary-name::binary-linux-amd64-workflow_dispatch"
            exit 0
          fi
          # This must be a tag event.
          GITHUB_TAG=${{ github.ref_name }}
          echo "::set-output name=binary-name::binary-linux-amd64-v${GITHUB_TAG}"

  build:
    needs: generate_name
    env:
      BINARY_NAME: ${{ needs.generate_name.outputs.binary-name }}
    outputs:
      binary-name: ${{ steps.build.outputs.binary-name }}
      digest: ${{ steps.hash.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@95c9bf48d0c570bb3e28e57108f3450cd67c1a44 # tag=v2.0.0
        with:
          bazelisk-version: "1.11"
      - name: Build artifact
        id: build
        run: |
          bazelisk build //:hello
          cp bazel-bin/hello_/hello $BINARY_NAME # Copy binary from Bazel path to root
          echo "::set-output name=binary-name::$BINARY_NAME"
      - name: Upload binary
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # tag=v2.3.1
        with:
          name: ${{ steps.build.outputs.binary-name }}
          path: ${{ steps.build.outputs.binary-name }}
          if-no-files-found: error
          retention-days: 5
      - name: Generate hash
        shell: bash
        id: hash
        run: |
          set -euo pipefail
          echo "::set-output name=digest::$(sha256sum $BINARY_NAME | base64 -w0)"

  provenance:
    needs: [build]
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      actions: read # For the entrypoint.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1
    with:
      base64-subjects: "${{ needs.build.outputs.digest }}"
      compile-generator: true

  # Now dispatch this workflow again with push tags.
  dispatch:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.4.0
      - id: push
        shell: bash
        run: |
          # Dispatch tags v14 v14.2 v13.0.30
          DATE=$(date --utc)
          echo "tagging $GITHUB_SHA"

          for tag in v14 v14.2 v13.0.30
          do
            GH_TOKEN=${PAT_TOKEN} gh release create "$tag" --target main
          done

  # Delete the tag once the provenance has been created.
  delete-tags:
    if: github.event_name == 'push'
    needs: [provenance]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.4.0
      - id: push
        run: |
          # Dispatch tags v14 v14.2 v13.0.30
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          TAG=${{ github.ref_name }}
          echo $TAG
          GH_TOKEN=${PAT_TOKEN} gh release delete "$TAG" -y
          git push --delete origin "$TAG"
